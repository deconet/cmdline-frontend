{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 808bb17fb9310ef5561b","webpack:///./lib/jest-mock-promise.ts","webpack:///./lib/jest-mock-promise-types.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AC7DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;AACA;AACuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;AC/KA;AAAA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AAC7B","file":"jest-mock-promise.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jest-mock-promise\"] = factory();\n\telse\n\t\troot[\"jest-mock-promise\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 808bb17fb9310ef5561b","/**\n * Synchronous Promise, which gets settled (resolved or settled) in a synchronous manner.\n *\n * `JestMockPromise` was written to simplify unit testing mocking (i.e. in [Jest](https://facebook.github.io/jest/) )\n *\n * In order to simplify synchronious promise settling two additional methods\n * were added to the promise instance:\n *   - `resolve` = forces the given promise to be resolved right away\n *   - `reject` = forces the given promise to be rejected right away\n *\n * By using these methods, we can write something like (provided that the Promise is mocked):\n *\n *    let promise = ExternalComponent.doAyncWork();\n *    promise.resolve({ label: 'this is some mock data' });\n *\n * @author   knee-cola<nikola.derezic@gmail.com>\n * @license  @license MIT License, http://www.opensource.org/licenses/MIT\n *\n */\nimport { PromiseState } from './jest-mock-promise-types';\nclass JestMockPromise {\n    constructor(callbackFn) {\n        this.handlers = [];\n        this.handlerIx = 0;\n        this.state = PromiseState.pending;\n        // if given, calling the given function\n        if (callbackFn) {\n            callbackFn(this.resolveFn.bind(this), this.rejectFn.bind(this));\n        }\n    }\n    /**\n     * Resolves the given promise\n     * @param data data which should be passed to `then` handler functions\n     */\n    resolveFn(data) {\n        this.data = data;\n        this.state = PromiseState.resolved;\n        this.err = void 0;\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx];\n            var returnedValue;\n            // stop the execution at first `catch` handler you run into\n            if (el.catch) {\n                break;\n            }\n            try {\n                // calling a `then` handler\n                returnedValue = el.then(this.data);\n            }\n            catch (ex) {\n                // in case `then` handler throws an error\n                // > pass it down to a first `catch` handler\n                this.handlerIx++;\n                this.rejectFn(ex);\n            }\n            if (returnedValue !== void 0) {\n                // IF handler returned a value\n                // > use it as the `data` for all the handlers which will be called next\n                this.data = returnedValue;\n            }\n        }\n        ;\n    }\n    ;\n    /**\n     * Rejects the given promise\n     * @param err error object which is to be passed as a param to `catch` function\n     */\n    rejectFn(err) {\n        this.state = PromiseState.rejected;\n        this.err = err;\n        // find the first `catch` handler and call it\n        for (var maxIx = this.handlers.length; this.handlerIx < maxIx; this.handlerIx++) {\n            var el = this.handlers[this.handlerIx], returnedValue;\n            if (el.catch) {\n                returnedValue = el.catch(err);\n                // try executing `then` handlers which follow\n                this.handlerIx++;\n                this.resolveFn(returnedValue);\n                // stop the execution as soon as you run into a first catch element\n                break;\n            }\n        }\n        ;\n    }\n    /**\n     * Appends fulfillment and rejection handlers to the promise,\n     * and returns a new promise resolving to the return value of\n     * the called handler, or to its original settled value if the\n     * promise was not handled (i.e. if the relevant handler\n     * onFulfilled or onRejected is not a function).\n     * @param onFulfilled fulfillment handler function\n     * @param onRejected rejection handler function\n     */\n    then(onFulfilled, onRejected) {\n        // if the promise is already settled (resolved or rejected)\n        // > call the apropriate handler\n        switch (this.state) {\n            case PromiseState.rejected:\n                if (onRejected) {\n                    onRejected(this.err);\n                }\n                break;\n            case PromiseState.resolved:\n                onFulfilled(this.data);\n                break;\n            default:\n                this.handlers.push({ then: onFulfilled });\n                if (onRejected) {\n                    this.handlers.push({ catch: onRejected });\n                }\n        }\n        return (this);\n    }\n    /**\n     * Appends a rejection handler callback to the promise,\n     * and returns a new promise resolving to the return\n     * value of the callback if it is called, or to its\n     * original fulfillment value if the promise is instead\n     * fulfilled.\n     * @param onRejected rejection handler function\n     */\n    catch(onRejected) {\n        // if the promise is already rejected\n        // > call the handler right away\n        if (this.state === PromiseState.resolved) {\n            onRejected(this.err);\n        }\n        else {\n            this.handlers.push({ catch: onRejected });\n        }\n        return (this);\n    }\n    /**\n     * Resolves the promise with the given promise data.\n     * This is a non-standard method, which should be the last\n     * one to be called, after all the fulfillment and rejection\n     * handlers have been registered.\n     * @param {*} data\n     */\n    resolve(data) {\n        this.resolveFn(data);\n    }\n    /**\n     * Rejects the promise with the given promise with the given error object.\n     * This is a non-standard method, which should be the last\n     * one to be called, after all the fulfillment and rejection\n     * handlers have been registered.\n     * @param {*} data\n     */\n    reject(err) {\n        this.rejectFn(err);\n    }\n    /**\n     * Creates a resolved promise with the given data\n     * @param data data which should be passed to `then` handler functions\n     */\n    static resolve(data) {\n        console.warn('a promise created via `JestMockPromise.resolve` will be executed async ... for sync execution call `resolve` method on an instance of `Promise`');\n        return (new JestMockPromise((resolve, reject) => {\n            setTimeout(resolve(data), 0);\n        }));\n    }\n    /**\n     * Creates a rejected promise with the given data\n     * @param err error object which is to be passed as a param to `catch` function\n     */\n    static reject(err) {\n        console.warn('a promise created via `JestMockPromise.reject` will be executed async ... for sync execution call `reject` method on an instance of `Promise`');\n        return (new JestMockPromise((resolve, reject) => {\n            setTimeout(reject(err), 0);\n        }));\n    }\n    ;\n}\nexport default JestMockPromise;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/jest-mock-promise.ts\n// module id = 0\n// module chunks = 0","var PromiseState;\n(function (PromiseState) {\n    PromiseState[PromiseState[\"pending\"] = 0] = \"pending\";\n    PromiseState[PromiseState[\"resolved\"] = 1] = \"resolved\";\n    PromiseState[PromiseState[\"rejected\"] = 2] = \"rejected\";\n})(PromiseState || (PromiseState = {}));\nexport { PromiseState };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/jest-mock-promise-types.ts\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}